// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using smart_table.Models.DataBase;

namespace smart_table.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20200523112658_orderCascade")]
    partial class orderCascade
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("smart_table.Models.Bills", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Evaluation")
                        .IsRequired()
                        .HasColumnName("evaluation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<long>("FkCustomerTables")
                        .HasColumnType("bigint");

                    b.Property<long?>("FkCustomerTablesNavigationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FkDiscounts")
                        .HasColumnName("fk_discounts")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPaid")
                        .HasColumnName("is_paid")
                        .HasColumnType("boolean");

                    b.Property<double?>("Tips")
                        .HasColumnName("tips")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FkCustomerTablesNavigationId");

                    b.HasIndex("FkDiscounts");

                    b.ToTable("bills");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 50.450000000000003,
                            DateTime = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Evaluation = "Labai skanus maistas",
                            FkCustomerTables = 1L,
                            FkDiscounts = 1L,
                            IsPaid = true,
                            Tips = 10.0
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 5.3899999999999997,
                            DateTime = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Evaluation = "Malonus aptarnavimas",
                            FkCustomerTables = 2L,
                            FkDiscounts = 2L,
                            IsPaid = false,
                            Tips = 0.0
                        });
                });

            modelBuilder.Entity("smart_table.Models.CustomerTables", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsTaken")
                        .HasColumnName("is_taken")
                        .HasColumnType("boolean");

                    b.Property<string>("JoinCode")
                        .HasColumnName("join_code")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("QrCode")
                        .HasColumnName("qr_code")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("SeatsCount")
                        .HasColumnName("seats_count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("customer_tables");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsTaken = true,
                            JoinCode = "DEF",
                            QrCode = "http://localhost:65312/QrCode/1",
                            SeatsCount = 6
                        },
                        new
                        {
                            Id = 2L,
                            IsTaken = false,
                            JoinCode = "wxz",
                            QrCode = "http://localhost:65312/QrCode/2",
                            SeatsCount = 4
                        });
                });

            modelBuilder.Entity("smart_table.Models.Discounts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnName("discount_code")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("DiscountProc")
                        .HasColumnName("discount_proc")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StandUntil")
                        .HasColumnName("stand_until")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("discounts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DiscountCode = "ST101",
                            DiscountProc = 15,
                            StandUntil = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            DiscountCode = "ST102",
                            DiscountProc = 25,
                            StandUntil = new DateTime(2020, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("smart_table.Models.DishCategories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("dish_categories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Title = "Picos"
                        },
                        new
                        {
                            Id = 2L,
                            Title = "Gerimai"
                        });
                });

            modelBuilder.Entity("smart_table.Models.DishIngredients", b =>
                {
                    b.Property<long>("FkDishes")
                        .HasColumnName("fk_dishes")
                        .HasColumnType("bigint");

                    b.Property<long>("FkIngredients")
                        .HasColumnName("fk_ingredients")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("double precision");

                    b.HasKey("FkDishes", "FkIngredients")
                        .HasName("dish_ingredients_pkey");

                    b.HasIndex("FkIngredients");

                    b.ToTable("dish_ingredients");
                });

            modelBuilder.Entity("smart_table.Models.Dishes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Calories")
                        .HasColumnName("calories")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("double precision");

                    b.Property<long?>("FkDishCategories")
                        .HasColumnName("fk_dish_categories")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnName("price")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("FkDishCategories");

                    b.ToTable("dishes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Calories = 300,
                            Description = "Labai skani pica",
                            Discount = 20.0,
                            FkDishCategories = 1L,
                            Price = 11.99,
                            Title = "Capriciosa"
                        },
                        new
                        {
                            Id = 2L,
                            Calories = -1,
                            Description = "Nesveika, bet skanu",
                            Discount = 0.0,
                            FkDishCategories = 2L,
                            Price = 1.99,
                            Title = "Cola"
                        },
                        new
                        {
                            Id = 3L,
                            Calories = 20,
                            Description = "Zalioji arbata, rytine",
                            Discount = 0.0,
                            FkDishCategories = 2L,
                            Price = 1.0,
                            Title = "Arbata"
                        },
                        new
                        {
                            Id = 4L,
                            Calories = 2000,
                            Description = "Pomidoru padazas, raudonieji svogunai, letai kepta plesyta jautiena, marinuoti agurkeliai, cederis",
                            Discount = 0.0,
                            FkDishCategories = 1L,
                            Price = 16.0,
                            Title = "Yankee Burger"
                        },
                        new
                        {
                            Id = 5L,
                            Calories = 1500,
                            Description = "Pomidoru padazas, malta peperoni desra, kepti cesnakai, karamelizuoti svogunai, mocarela, grazgarstes",
                            Discount = 20.0,
                            FkDishCategories = 1L,
                            Price = 9.0,
                            Title = "The Wall Street"
                        },
                        new
                        {
                            Id = 6L,
                            Calories = 400,
                            Description = "Pomidoru padazas - peperoni desra - pankoliu ir anyziumi gardintos desreles - mocarela - marinuoti raudonieji",
                            Discount = 0.0,
                            FkDishCategories = 1L,
                            Price = 11.0,
                            Title = "BIG TONY'S"
                        },
                        new
                        {
                            Id = 7L,
                            Calories = 1520,
                            Description = "Trinti pomidorai - skamorca - mocarela - pekorino suris - peperoni desra - kepsniu padazas",
                            Discount = 30.0,
                            FkDishCategories = 1L,
                            Price = 12.0,
                            Title = "MESOS OMG!"
                        },
                        new
                        {
                            Id = 8L,
                            Calories = 200,
                            Description = "Naminis pomidoru padazas - letai kepta plesyta kiauliena - musu gamintas kepsniu padazas",
                            Discount = 0.0,
                            FkDishCategories = 1L,
                            Price = 10.5,
                            Title = "TEXAS COWBOY"
                        },
                        new
                        {
                            Id = 9L,
                            Calories = 2000,
                            Description = "Pomidoru padazas - marinuota kepta vistiena - musu gamintas kepsniu padazas - parmezanas",
                            Discount = 50.0,
                            FkDishCategories = 1L,
                            Price = 10.5,
                            Title = "FRIKIN CHICKEN"
                        },
                        new
                        {
                            Id = 10L,
                            Calories = 20,
                            Description = "Skirtingu skoniu.",
                            Discount = 0.0,
                            FkDishCategories = 2L,
                            Price = 1.45,
                            Title = "JD naminis limonadas"
                        },
                        new
                        {
                            Id = 11L,
                            Calories = 300,
                            Description = "330ml",
                            Discount = 0.0,
                            FkDishCategories = 2L,
                            Price = 1.75,
                            Title = "Pepsi"
                        },
                        new
                        {
                            Id = 12L,
                            Calories = 0,
                            Description = "330ml",
                            Discount = 0.0,
                            FkDishCategories = 2L,
                            Price = 1.75,
                            Title = "Pepsi MAX"
                        },
                        new
                        {
                            Id = 13L,
                            Calories = 20,
                            Description = "330ml",
                            Discount = 50.0,
                            FkDishCategories = 2L,
                            Price = 1.6499999999999999,
                            Title = "Gira"
                        },
                        new
                        {
                            Id = 14L,
                            Calories = 0,
                            Description = "500ml",
                            Discount = 15.0,
                            FkDishCategories = 2L,
                            Price = 1.5,
                            Title = "Vanduo"
                        });
                });

            modelBuilder.Entity("smart_table.Models.EventType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character(12)")
                        .IsFixedLength(true)
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.ToTable("event_type");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Saskaita"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Atsaukimas"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Klientas"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Uzsakymas"
                        });
                });

            modelBuilder.Entity("smart_table.Models.Events", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("FkBills")
                        .HasColumnName("fk_bills")
                        .HasColumnType("bigint");

                    b.Property<long>("Type")
                        .HasColumnName("type")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FkBills");

                    b.HasIndex("Type");

                    b.ToTable("events");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FkBills = 1L,
                            Type = 3L
                        },
                        new
                        {
                            Id = 2L,
                            FkBills = 1L,
                            Type = 4L
                        },
                        new
                        {
                            Id = 3L,
                            FkBills = 1L,
                            Type = 1L
                        },
                        new
                        {
                            Id = 4L,
                            FkBills = 2L,
                            Type = 3L
                        },
                        new
                        {
                            Id = 5L,
                            FkBills = 2L,
                            Type = 4L
                        },
                        new
                        {
                            Id = 6L,
                            FkBills = 1L,
                            Type = 3L
                        });
                });

            modelBuilder.Entity("smart_table.Models.Ingredients", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Title = "Kumpis"
                        },
                        new
                        {
                            Id = 2L,
                            Title = "Suris"
                        });
                });

            modelBuilder.Entity("smart_table.Models.MenuDishes", b =>
                {
                    b.Property<long>("FkDishes")
                        .HasColumnName("fk_dishes")
                        .HasColumnType("bigint");

                    b.Property<long>("FkMenus")
                        .HasColumnName("fk_menus")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("date_from")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUntil")
                        .HasColumnName("date_until")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("FkDishes", "FkMenus")
                        .HasName("menu_dishes_pkey");

                    b.HasIndex("FkMenus");

                    b.ToTable("menu_dishes");

                    b.HasData(
                        new
                        {
                            FkDishes = 1L,
                            FkMenus = 1L
                        },
                        new
                        {
                            FkDishes = 2L,
                            FkMenus = 1L
                        },
                        new
                        {
                            FkDishes = 3L,
                            FkMenus = 1L
                        },
                        new
                        {
                            FkDishes = 1L,
                            FkMenus = 2L
                        },
                        new
                        {
                            FkDishes = 2L,
                            FkMenus = 2L
                        },
                        new
                        {
                            FkDishes = 4L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 5L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 6L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 7L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 8L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 9L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 10L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 11L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 12L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 13L,
                            FkMenus = 3L
                        },
                        new
                        {
                            FkDishes = 14L,
                            FkMenus = 3L
                        });
                });

            modelBuilder.Entity("smart_table.Models.Menus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("date_from")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateUntil")
                        .HasColumnName("date_until")
                        .HasColumnType("date");

                    b.Property<bool>("Fri")
                        .HasColumnName("fri")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("Mon")
                        .HasColumnName("mon")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sat")
                        .HasColumnName("sat")
                        .HasColumnType("boolean");

                    b.Property<bool>("Sun")
                        .HasColumnName("sun")
                        .HasColumnType("boolean");

                    b.Property<bool>("Thu")
                        .HasColumnName("thu")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("TimeFrom")
                        .HasColumnName("time_from")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan?>("TimeUntil")
                        .HasColumnName("time_until")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("Tue")
                        .HasColumnName("tue")
                        .HasColumnType("boolean");

                    b.Property<bool>("Wed")
                        .HasColumnName("wed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("menus");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Fri = true,
                            IsActive = true,
                            Mon = true,
                            Sat = true,
                            Sun = true,
                            Thu = true,
                            TimeFrom = new TimeSpan(0, 6, 0, 0, 0),
                            TimeUntil = new TimeSpan(0, 10, 0, 0, 0),
                            Title = "Pusryciu meniu",
                            Tue = true,
                            Wed = true
                        },
                        new
                        {
                            Id = 2L,
                            Fri = true,
                            IsActive = true,
                            Mon = true,
                            Sat = true,
                            Sun = true,
                            Thu = true,
                            Title = "Pagrindinis meniu",
                            Tue = true,
                            Wed = true
                        },
                        new
                        {
                            Id = 3L,
                            Fri = true,
                            IsActive = true,
                            Mon = true,
                            Sat = true,
                            Sun = true,
                            Thu = true,
                            Title = "Brooklyn Brothers",
                            Tue = true,
                            Wed = true
                        });
                });

            modelBuilder.Entity("smart_table.Models.OrderDishes", b =>
                {
                    b.Property<long>("FkDishes")
                        .HasColumnName("fk_dishes")
                        .HasColumnType("bigint");

                    b.Property<long>("FkOrders")
                        .HasColumnName("fk_orders")
                        .HasColumnType("bigint");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("integer");

                    b.HasKey("FkDishes", "FkOrders")
                        .HasName("order_dishes_pkey");

                    b.HasIndex("FkOrders");

                    b.ToTable("order_dishes");

                    b.HasData(
                        new
                        {
                            FkDishes = 1L,
                            FkOrders = 1L,
                            Comment = "Viena pica be pado",
                            Quantity = 2
                        },
                        new
                        {
                            FkDishes = 2L,
                            FkOrders = 1L,
                            Comment = "Be cukraus",
                            Quantity = 2
                        },
                        new
                        {
                            FkDishes = 1L,
                            FkOrders = 2L,
                            Comment = "",
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("smart_table.Models.Orders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_time")
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("FkBills")
                        .HasColumnName("fk_bills")
                        .HasColumnType("bigint");

                    b.Property<long?>("FkRegisteredUsers")
                        .HasColumnName("fk_registered_users")
                        .HasColumnType("bigint");

                    b.Property<bool>("Served")
                        .HasColumnName("served")
                        .HasColumnType("boolean");

                    b.Property<bool>("Submitted")
                        .HasColumnName("submitted")
                        .HasColumnType("boolean");

                    b.Property<double?>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FkBills");

                    b.HasIndex("FkRegisteredUsers");

                    b.ToTable("orders");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateTime = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBills = 1L,
                            FkRegisteredUsers = 2L,
                            Served = true,
                            Submitted = true,
                            Temperature = 15.0
                        },
                        new
                        {
                            Id = 2L,
                            DateTime = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBills = 2L,
                            FkRegisteredUsers = 3L,
                            Served = false,
                            Submitted = true,
                            Temperature = 17.0
                        },
                        new
                        {
                            Id = 3L,
                            DateTime = new DateTime(2020, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FkBills = 1L,
                            Served = false,
                            Submitted = true,
                            Temperature = 19.0
                        });
                });

            modelBuilder.Entity("smart_table.Models.RegisteredUsers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsBlocked")
                        .HasColumnName("is_blocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<long>("Role")
                        .HasColumnName("role")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Role");

                    b.ToTable("registered_users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email@email.com",
                            IsBlocked = false,
                            Name = "User1",
                            Password = "Password123",
                            Phone = "860000000",
                            Role = 1L,
                            Surname = "User1"
                        },
                        new
                        {
                            Id = 2L,
                            BirthDate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            IsBlocked = false,
                            Name = "User2",
                            Password = "Password456",
                            Phone = "",
                            Role = 2L,
                            Surname = "User2"
                        },
                        new
                        {
                            Id = 3L,
                            BirthDate = new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "",
                            IsBlocked = false,
                            Name = "User3",
                            Password = "Secret123",
                            Phone = "",
                            Role = 2L,
                            Surname = "User3"
                        });
                });

            modelBuilder.Entity("smart_table.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character(13)")
                        .IsFixedLength(true)
                        .HasMaxLength(13);

                    b.HasKey("Id");

                    b.ToTable("user_role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "administrator"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "waiter"
                        });
                });

            modelBuilder.Entity("smart_table.Models.Bills", b =>
                {
                    b.HasOne("smart_table.Models.CustomerTables", "FkCustomerTablesNavigation")
                        .WithMany("Bills")
                        .HasForeignKey("FkCustomerTablesNavigationId");

                    b.HasOne("smart_table.Models.Discounts", "FkDiscountsNavigation")
                        .WithMany("Bills")
                        .HasForeignKey("FkDiscounts")
                        .HasConstraintName("fkc_discounts");
                });

            modelBuilder.Entity("smart_table.Models.DishIngredients", b =>
                {
                    b.HasOne("smart_table.Models.Dishes", "FkDishesNavigation")
                        .WithMany("DishIngredients")
                        .HasForeignKey("FkDishes")
                        .HasConstraintName("fkc_dishes")
                        .IsRequired();

                    b.HasOne("smart_table.Models.Ingredients", "FkIngredientsNavigation")
                        .WithMany("DishIngredients")
                        .HasForeignKey("FkIngredients")
                        .HasConstraintName("fkc_ingredients")
                        .IsRequired();
                });

            modelBuilder.Entity("smart_table.Models.Dishes", b =>
                {
                    b.HasOne("smart_table.Models.DishCategories", "FkDishCategoriesNavigation")
                        .WithMany("Dishes")
                        .HasForeignKey("FkDishCategories")
                        .HasConstraintName("fkc_dish_categories");
                });

            modelBuilder.Entity("smart_table.Models.Events", b =>
                {
                    b.HasOne("smart_table.Models.Bills", "FkBillsNavigation")
                        .WithMany("Events")
                        .HasForeignKey("FkBills")
                        .HasConstraintName("fkc_bills")
                        .IsRequired();

                    b.HasOne("smart_table.Models.EventType", "TypeNavigation")
                        .WithMany("Events")
                        .HasForeignKey("Type")
                        .HasConstraintName("events_type_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("smart_table.Models.MenuDishes", b =>
                {
                    b.HasOne("smart_table.Models.Dishes", "FkDishesNavigation")
                        .WithMany("MenuDishes")
                        .HasForeignKey("FkDishes")
                        .HasConstraintName("fkc_dishes")
                        .IsRequired();

                    b.HasOne("smart_table.Models.Menus", "FkMenusNavigation")
                        .WithMany("MenuDishes")
                        .HasForeignKey("FkMenus")
                        .HasConstraintName("fkc_menus")
                        .IsRequired();
                });

            modelBuilder.Entity("smart_table.Models.OrderDishes", b =>
                {
                    b.HasOne("smart_table.Models.Dishes", "FkDishesNavigation")
                        .WithMany("OrderDishes")
                        .HasForeignKey("FkDishes")
                        .HasConstraintName("fkc_dishes")
                        .IsRequired();

                    b.HasOne("smart_table.Models.Orders", "FkOrdersNavigation")
                        .WithMany("OrderDishes")
                        .HasForeignKey("FkOrders")
                        .HasConstraintName("fkc_orders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("smart_table.Models.Orders", b =>
                {
                    b.HasOne("smart_table.Models.Bills", "FkBillsNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkBills")
                        .HasConstraintName("fkc_bills");

                    b.HasOne("smart_table.Models.RegisteredUsers", "FkRegisteredUsersNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkRegisteredUsers")
                        .HasConstraintName("fkc_registered_users")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("smart_table.Models.RegisteredUsers", b =>
                {
                    b.HasOne("smart_table.Models.UserRole", "RoleNavigation")
                        .WithMany("RegisteredUsers")
                        .HasForeignKey("Role")
                        .HasConstraintName("registered_users_role_fkey")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
